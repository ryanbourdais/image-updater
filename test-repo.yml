version: 2.1
orbs:
  flutter: circleci/flutter@2.0.2
  android: circleci/android@2.3.0
  win: circleci/windows@5.0

jobs:
  flutter-test:
    docker:
    - image: cimg/android:2023.10.2-ndk
    steps:
    - checkout
    - run: ruby -v
    - run: echo \'export STR="string"\' >> "$BASH_ENV"
    - android/run-tests:
        max-tries: 1
        pre-test-command: echo $STR
    - flutter/install_sdk:
        version: 3.7.3
    - run: flutter test -r json > report.json
    - run: flutter analyze
    - store_artifacts:
        path: report.json

  flutter-2204-test:
    machine:
      image: ubuntu-2204:default
    steps:
    - checkout
    - run: wget -P ./flank https://github.com/Flank/flank/releases/download/v23.07.0/flank.jar
    - run: echo "java -jar flank.jar $@" > ./flank/flank.sh
    - run: echo alias flank="\'sh ./flank/flank.sh\'" >> ${CIRCLECI_HOME}/.circlerc
    - run: flank
    - android/run-tests:
        max-tries: 1
        pre-test-command: echo $STR
    - flutter/install_sdk:
        version: 3.7.3
    - run: flutter test -r json > report.json
    - run: flutter analyze
    - store_artifacts:
        path: report.json

  flutter-2004-test:
    executor:
      name: win/server-2022
      version: 2023.08.1
    steps:
    - checkout
    - run: echo \'export STR="string"\' >> "$BASH_ENV"
    - android/run-tests:
        max-tries: 1
        pre-test-command: echo $STR
    - flutter/install_sdk:
        version: 3.7.3
    - run: flutter test -r json > report.json
    - run: flutter analyze
    - store_artifacts:
        path: report.json

  flutter-build:
    machine:
      image: android2023.12.1
    steps:
    - checkout
    - run: wget -P ./flank https://github.com/Flank/flank/releases/download/v23.07.0/flank.jar
    - run: echo "java -jar ./flank/flank.jar $@" > ./flank/flank.sh
    - run:
        name: test flank
        command: $flank
        environment:
          flank: \'sh ./flank/flank.sh\'
    - flutter/install_sdk_and_pub:
        version: 3.7.3
      # - run: flutter build apk
    - android/start-emulator-and-run-tests:
        pre-run-tests-steps:
        - run: echo "beginning test"
        test-command: flutter test
        pre-emulator-wait-steps:
        - run: echo "waiting for emulator"
        post-emulator-wait-steps:
        - run: echo "emulator running"
        post-emulator-launch-assemble-command: adb pull data .
        post-run-tests-steps:
        - run: echo "run test done"
        - run: mkdir testdata
        - run: adb pull storage .
        additional-avd-args: -d pixel_3a -c 1G
        additional-emulator-args: -memory 4096 -cores 3 -writable-system
    - store_artifacts:
        path: build
    - store_artifacts:
        path: testdata
  firebase-cli:
    machine:
      image: android:default
    steps:
    - checkout
    - run: curl -sL https://firebase.tools | bash

  windows_env:
    machine:
      image: \'windows-server-2019-vs2019:2023.10.1\'
      resource_class: windows.medium
    steps:
    - run:
        command: setx testvar "testing1"
        shell: powershell.exe
    - run:
        command: (Get-ChildItem env:)
        shell: powershell.exe
    - run:
        command: SetEnvironmentVariable("testvar2", "testing2", \'Machine\')
        shell: powershell.exe
    - run:
        command: $env:testvar2
        shell: powershell.exe

  verifydefault:
    parameters:
      xcodev:
        type: string
    macos:
      xcode: << parameters.xcodev >>
    resource_class: macos.m1.large.gen1
    steps:
    - run: xcodebuild -version

  verifydefault_intel:
    parameters:
      xcodev:
        type: string
    macos:
      xcode: << parameters.xcodev >>
    resource_class: macos.x86.medium.gen2
    steps:
    - run: xcodebuild -version
